[{"id":"1680951842816","desc":"function","value":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Http\\Traits\\GeneralResponse\\GeneralResponse;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Course;\nuse App\\Models\\Document;\nuse App\\Models\\FavouriteCourse;\nuse App\\Models\\FavouriteRoom;\nuse App\\Models\\FeedbackCourse;\nuse App\\Models\\Message;\nuse App\\Models\\Room;\nuse App\\Models\\User;\nuse App\\Models\\VideosCourse;\nuse http\\Env\\Response;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Password;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Validation\\Rule;\nuse PHPOpenSourceSaver\\JWTAuth\\Contracts\\Providers\\Auth;\nuse function PHPUnit\\Framework\\isEmpty;\nuse Illuminate\\Support\\Facades;\nclass ApiController extends Controller\n{\n    use ApiTrait;\n\n    public function __construct()\n    {\n        $this->middleware('JWTMiddleware', ['except' => ['login', 'store', 'register']]);\n    }\n\n\n    //RESET PASSWORD\n    public function store(Request $request): RedirectResponse\n    {\n        $request->validate([\n            'email' => ['required', 'email'],\n        ]);\n\n        // We will send the password reset link to this user. Once we have attempted\n        // to send the link, we will examine the response then see the message we\n        // need to show to the user. Finally, we'll send out a proper response.\n        $status = Password::sendResetLink(\n            $request->only('email')\n        );\n        return $status == Password::RESET_LINK_SENT\n            ? back()->with('status', __($status))\n            : back()->withInput($request->only('email'))\n                ->withErrors(['email' => __($status)]);\n    }\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n    //CHAT ROOM\n    public function sendMessages(Request $request)\n    {\n\n\n        if (!$request->file('file')) {\n\n            $msg = $request->message;\n            Message::create([\n                'user_id' => \\Illuminate\\Support\\Facades\\Auth::user()->id,\n                'message_text' => $msg,\n                'file' => \"\",\n                'sender' => \\Illuminate\\Support\\Facades\\Auth::user()->name,\n            ]);\n            $messages = DB::table('messages')->select('sender', 'message_text', 'file', 'created_at')->get();\n            return response()->json(['Room Chat' => $messages]);\n        } else {\n\n            $msg = $request->message;\n            $file = $request->file('file');\n            $file_name = $file->getClientOriginalName();\n            Message::create([\n                'user_id' => \\Illuminate\\Support\\Facades\\Auth::user()->id,\n                'message_text' => $msg,\n                'file' => $file_name,\n                'sender' => \\Illuminate\\Support\\Facades\\Auth::user()->name,\n            ]);\n            $file->move(public_path('files'), $file_name);\n            $messages = DB::table('messages')->select('sender', 'message_text', 'file', 'created_at')->get();\n            return response()->json(['Room Chat' => $messages]);\n        }\n    }\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n    //CREATE COURSE\n    public function create_courses(Request $request)\n    {\n        $data = $request->only('name');\n        $validator = Validator::make($data, [\n            'name' => 'required|string|unique:courses',\n        ]);\n        if ($validator->fails()) {\n            return response()->json(['error' => $validator->messages()], 200);\n        }\n        if (Facades\\Auth::user()->type == 'instructor') {\n            $course = Course::create([\n                'name' => $request->name,\n                'instructor_name' => Facades\\Auth::user()->name,\n                'instructor_id' => \\Illuminate\\Support\\Facades\\Auth::user()->id,\n            ]);\n            return $this->ApiResponse('Created Successfully', 201, $course);\n        } else\n            return $this->ApiResponse('Field : You Are Not An Instructor', 403, \"\");\n    }\n\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n    //SHOW ALL COURSES\n    public function show_all_course()\n    {\n\n\n        $courses = Course::first();\n        if ($courses) {\n            $courses = Course::with(['video_course' => function ($q) {\n                $q->select('name', 'videos', 'course_id');\n            }, 'feedback' => function ($q) {\n                $q->select('body', 'course_id');\n            }])->get();\n            return $this->ApiResponse('Success', 200, $courses);\n        } else\n            return $this->ApiResponse('There are no courses', 404, \"\");\n    }\n\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n    //SEARCHING FOR COURSES\n    public function search_course(Request $request)\n    {\n        $name = $request->name;\n\n        if (isset($name)) {\n            $course = Course::with(['video_course', 'feedback'])->where('name', 'like', '%' . $name . '%')->first();\n            if (!$course)\n                return $this->ApiResponse('Not Found', 404, \"\");\n            else {\n                $course = Course::with(['video_course' => function ($q) {\n                    $q->select('videos', 'course_id');\n                }, 'feedback' => function ($q) {\n                    $q->select('body', 'course_id');\n                }])->where('name', 'like', '%' . $name . '%')->first();\n                return $this->ApiResponse('Success', 200, $course);\n            }\n        } else {\n\n            $name = Course::with(['video_course' => function ($q) {\n                $q->select('videos', 'course_id');\n            }, 'feedback' => function ($q) {\n                $q->select('body', 'course_id');\n            }])->get();\n            return $this->ApiResponse('Success', 200, $name);\n        }\n\n    }\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n    //CREATE FEEDBACK\n    public function create_feedback(Request $request)\n    {\n        $data = $request->only('body', 'course_id');\n        $validator = Validator::make($data, [\n            'body' => 'required|string',\n            'course_id' => 'required|string'\n        ]);\n        if ($validator->fails()) {\n            return response()->json(['error' => $validator->messages()], 200);\n        }\n        $body = $request->body;\n        $course_id = $request->course_id;\n        $test = DB::table('courses')->select('id')->where('id', $course_id)->first();\n        if ($test) {\n            $feedback = FeedbackCourse::create([\n                'body' => $body,\n                'course_id' => $course_id,\n            ]);\n            return $this->ApiResponse('Success', 200, $feedback);\n        } else\n            return $this->ApiResponse('Course_id Not Found', 404, \"\");\n    }\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n    //SHOW FEEDBACK BY COURSE ID\n    public function show_feedbacks_Course_id(Request $request)\n    {\n        $data = $request->only('course_id');\n        $validator = Validator::make($data, [\n            'course_id' => 'required|string',\n        ]);\n        if ($validator->fails()) {\n            return response()->json(['error' => $validator->messages()], 200);\n        }\n\n        $id = $request->course_id;\n        $course_id = Course::find($id);\n        $feedback = FeedbackCourse::where('course_id', $id)->first();\n        if ($feedback && $course_id) {\n            return $this->ApiResponse('Success', 200, $course_id->Feedback);\n        } else\n            return $this->ApiResponse('Not Found id or no feedback for this course', 404, \"\");\n    }\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n    //UPLOAD VIDEO ON A COURSE\n    public function upload_videos_course_id(Request $request)\n    {\n\n        $id = \\Illuminate\\Support\\Facades\\Auth::user()->id;\n        $insteuctor_id = DB::table('courses')->select('instructor_id')->where('instructor_id', '=', $id)->first();\n        if (\\Illuminate\\Support\\Facades\\Auth::user()->type == 'instructor' && $insteuctor_id) {\n            $data = $request->only('videos', 'course_id' , 'name');\n            $validator = Validator::make($data, [\n                'videos' => 'required|unique:videos_courses',\n                'course_id' => 'required|string',\n                'name' => 'required|string',\n            ]);\n            if ($validator->fails()) {\n                return response()->json(['error' => $validator->messages()], 200);\n            }\n\n            $videos = $request->file('videos');\n            $videos_name = $videos->getClientOriginalName();\n            $name = $request->name;\n            $course_id = $request->course_id;\n            $id = DB::table('courses')->select('id')->where('id', $course_id)->first();\n            if ($id) {\n                $VideoCourse = VideosCourse::create([\n                    'videos' => $videos_name,\n                    'course_id' => $course_id,\n                    'name' =>$name,\n\n                ]);\n                $videos->move(public_path('files'), $videos_name);\n                return $this->ApiResponse('Uploaded Successfully', 201, '');\n            } else\n                return $this->ApiResponse('Course_id not found', 404, \"\");\n        } else\n            return $this->ApiResponse('Sorry You Are Not An Instructor OR This Course Not Belongs To You', 403, \"\");\n    }\n\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n    //SHOW VIDEO BY COURSE ID\n    public function show_videos_course_id(Request $request)\n    {\n        $data = $request->only('course_id');\n        $validator = Validator::make($data, [\n            'course_id' => 'required|numeric',\n        ]);\n        if ($validator->fails()) {\n            return response()->json(['error' => $validator->messages()], 200);\n        }\n\n        $id = $request->course_id;\n        //$feedback = FeedbackCourse::where('course_id', $id)->first();\n        $course_id = Course::with(['video_course' => function ($q) {\n            $q->select('videos', 'course_id');\n        }, 'feedback' => function ($q) {\n            $q->select('body', 'course_id');\n        }])->find($id);\n        if ($course_id) {\n            //$course_id->feedback = $feedback;\n            return $this->ApiResponse('Success', 200, $course_id);\n        } else\n            return $this->ApiResponse('Not Found', 404, \"\");\n    }\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n    //UPDATE USER\n    public function update_user(Request $request)\n    {\n\n\n        $email = $request->email;\n        $id = \\Illuminate\\Support\\Facades\\Auth::user()->id;\n        $user = User::find($id);\n\n        $t = DB::table('users')->select('email')->where('email', $email)->first();\n        if ($t && Facades\\Auth::user()->email != $email) {\n            return $this->ApiResponse('sorry this email is already existed', 403, \"\");\n        } else {\n            if ($user) {\n                $data = $request->only('name', 'email', 'password');\n                $validator = Validator::make($data, [\n                    'name' => 'required|string',\n                    'email' => 'required|email:unique:users,email' . $email,\n                    'password' => 'required|string|min:6|max:50'\n                ]);\n\n                //Send failed response if request is not valid\n                if ($validator->fails()) {\n                    return response()->json(['error' => $validator->messages()], 200);\n                }\n                $id = Facades\\Auth::user()->id;\n                if ($id) {\n                    $user = User::find($id);\n                    $update = DB::table('users')->where('id', $id)->update([\n                        'name' => $request->name,\n                        'email' => $request->email,\n                        'password' => Hash::make($request->password),\n                    ]);\n                    return $this->ApiResponse('Success', 200, $user);\n                } else\n                    return $this->ApiResponse('Field', 403, \"\");\n            }\n\n        }\n    }\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n    //REMOVE USER\n    public function remove_user(Request $request)\n    {\n\n\n        $id = Facades\\Auth::user()->id;\n        $user = User::find($id);\n        if (!$user) {\n            return $this->ApiResponse('There Are No User By This Token', 403, \"\");\n        } else {\n            $user->delete();\n            return $this->ApiResponse('Your Account Deleted successfully', 200, \"\");\n        }\n\n\n//        $email = $request->email;\n//        if (!$email)\n//        {\n//            return $this->ApiResponse('Enter Your Email', 403, \"\");\n//        }\n//        if ($email == Facades\\Auth::user()->email)\n//        {\n//            Facades\\Auth::user()->delete();\n//            return $this->ApiResponse('Your Account Deleted successfully', 200, \"\");\n//        }\n//        else\n//        {\n//            return $this->ApiResponse('Sorry the email is incorrect', 200, \"\");\n//        }\n//        DB::table('users')->where('id', $id)->delete();\n\n\n    }\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n    public function createRoom(Request $request)\n    {\n        $data = $request->only('name');\n        $validator = Validator::make($data, [\n            'name' => 'required|string',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json(['error' => $validator->messages()], 200);\n        }\n\n        $type = Facades\\Auth::user()->type;\n        if ($type == 'instructor') {\n            $room = Room::create([\n                'name' => $request->name,\n                'description' => $request->description,\n                'user_id' => Facades\\Auth::user()->id,\n\n            ]);\n\n            return $this->ApiResponse('Created Successfully', 201, $room);\n        } else {\n            return $this->ApiResponse('Sorry You Are Not An Instructor', 403, \"\");\n        }\n\n    }\n\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n    public function joinRoom(Request $request)\n    {\n        $data = $request->only('room_id', 'message');\n        $validator = Validator::make($data, [\n            'room_id' => 'required|numeric',\n            'message' => 'required',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json(['error' => $validator->messages()], 200);\n        }\n\n        $name = $request->name;\n        $room_id = $request->room_id;\n        $room = DB::table('rooms')->where('id', '=', $room_id)->first();\n        if ($room) {\n            if (!$request->file('file')) {\n                $message = Message::create([\n                    'message_text' => $request->message,\n                    'room_id' => $request->room_id,\n                    'file' => \"\",\n                    'user_id' => Facades\\Auth::user()->id,\n                    'sender' => \\Illuminate\\Support\\Facades\\Auth::user()->name,\n                ]);\n                $message = DB::table('messages')->select('sender', 'message_text', 'file', 'created_at')->where('room_id', '=', $room_id)->get();\n                return response()->json(['Room Chat' => $message]);\n            } else {\n\n                $file = $request->file('file');\n                $file_name = $file->getClientOriginalName();\n                Message::create([\n                    'message_text' => $request->message,\n                    'room_id' => $request->room_id,\n                    'file' => $file_name,\n                    'user_id' => Facades\\Auth::user()->id,\n                    'sender' => \\Illuminate\\Support\\Facades\\Auth::user()->name,\n                ]);\n                $file->move(public_path('files'), $file_name);\n                $message = DB::table('messages')->select('sender', 'message_text', 'file', 'created_at')->where('room_id', '=', $room_id)->get();\n                return response()->json(['Room Chat' => $message]);\n            }\n        } else {\n            return $this->ApiResponse('Not Found', 404, \"\");\n        }\n\n\n    }\n\n\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n\n    public function uploadFile(Request $request)\n    {\n\n        $data = $request->only('file');\n        $validator = Validator::make($data, [\n            'file' => 'required|file',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json(['error' => $validator->messages()], 200);\n        }\n\n        $file = $request->file('file');\n        $name = $file->getClientOriginalName();\n        $fileContent = file_get_contents($file);\n        $fileSuccess = Document::create([\n            'name' => $name,\n            'content' => $fileContent,\n        ]);\n        return $this->ApiResponse('Created Successfully', 201, $name);\n\n    }\n\n\n\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n\n\n    public function AddRoomFav(Request $request)\n    {\n        $data = $request->only('room_id');\n        $validator = Validator::make($data, [\n            'room_id' => ['required',\n            Rule::unique('favourite_rooms')->where(function ($query)  {\n                return $query->where('user_id', Facades\\Auth::user()->id);\n            })],\n        ] , ['room_id.unique' => 'The Room Already Has Been Added To Your Favourite']);\n\n        if ($validator->fails()) {\n            return response()->json(['error' => $validator->messages()], 200);\n        }\n        $room = Room::find($request->room_id);\n        if ($room) {\n            $addFav = FavouriteRoom::create([\n                'user_id' => Facades\\Auth::user()->id,\n                'room_id' => $request->room_id,\n            ]);\n\n            return $this->ApiResponse('Added Successfully', 200, $addFav);\n        } else\n            return $this->ApiResponse('Not Found', 404, \"\");\n\n    }\n\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n    public function AddCourseFav(Request $request)\n    {\n        $data = $request->only('course_id');\n        $validator = Validator::make($data, [\n            'course_id' => ['required',\n                Rule::unique('favourite_courses')->where(function ($query)  {\n                    return $query->where('user_id', Facades\\Auth::user()->id);\n                })],\n        ] , ['course_id.unique' => 'The Course Already Has Been Added To Your Favourite']);\n\n        if ($validator->fails()) {\n            return response()->json(['error' => $validator->messages()], 200);\n        }\n        $course = Course::find($request->course_id);\n        if ($course) {\n            $addFav = FavouriteCourse::create([\n                'user_id' => Facades\\Auth::user()->id,\n                'course_id' => $request->course_id,\n            ]);\n\n            return $this->ApiResponse('Added Successfully', 200, $addFav);\n        } else\n            return $this->ApiResponse('Not Found', 404, \"\");\n\n    }\n\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n\n    public function showFavRoom(Request $request)\n    {\n        $roomo = FavouriteRoom::with('room')->where('user_id' , '=' , Facades\\Auth::user()->id)->first();\n        if ($roomo) {\n            $room = FavouriteRoom::with('room')->where('user_id' , '=' , Facades\\Auth::user()->id)->get();\n            return $this->ApiResponse('success', 200, $room);\n        } else {\n            return $this->ApiResponse('Nothing Added Yet', 404, \"\");\n        }\n    }\n\n\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n\n    public function showFavCourse(Request $request)\n    {\n        $roomo = FavouriteCourse::with('course')->where('user_id' , '=' , Facades\\Auth::user()->id)->first();\n        if ($roomo) {\n            $room = FavouriteCourse::with('course')->where('user_id' , '=' , Facades\\Auth::user()->id)->get();\n            return $this->ApiResponse('success', 200, $room);\n        } else {\n            return $this->ApiResponse('Nothing Added Yet', 404, \"\");\n        }\n    }\n\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n\n    public function getProfile()\n    {\n        $profile = User::find(Facades\\Auth::user()->id);\n        return $this->ApiResponse('success', 200, $profile);\n    }\n\n\n    /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n\n\n\n    public function removeFavCourse(Request $request)\n    {\n        $data = $request->only('course_id');\n        $validator = Validator::make($data, [\n            'course_id' => 'required|numeric',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json(['error' => $validator->messages()], 200);\n        }\n        $course_id = $request->course_id;\n        $course = FavouriteCourse::where('course_id' , $course_id)->where('user_id' , Facades\\Auth::user()->id)->first();\n        if ($course)\n        {\n            $course->delete();\n            return $this->ApiResponse('Removed From Favourite Courses Successfully', 200, \"\");\n        }\n        else\n        {\n            return $this->ApiResponse('Not Found Or This Course Is Not In Your Fav', 404, \"\");\n        }\n    }\n\n\n\n\n    public function removeFavRoom(Request $request)\n    {\n        $data = $request->only('room_id');\n        $validator = Validator::make($data, [\n            'room_id' => 'required|numeric',\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json(['error' => $validator->messages()], 200);\n        }\n        $room_id = $request->room_id;\n        $room = FavouriteRoom::where('room_id' , $room_id)->where('user_id' , Facades\\Auth::user()->id)->first();\n        if ($room)\n        {\n            $room->delete();\n            return $this->ApiResponse('Removed From Favourite Rooms Successfully', 200, \"\");\n        }\n        else\n        {\n            return $this->ApiResponse('Not Found Or This Room Is Not In Your Fav', 404, \"\");\n        }\n    }\n}\n\n\n","position":{"line":168,"character":0}}]